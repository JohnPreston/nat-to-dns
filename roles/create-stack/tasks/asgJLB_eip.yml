#
# Get the addresses to use
#

- name: Debug the EIPs
  debug: msg="{{ ec2_eips }}"
  when:
  - debug

- name: FAILED - Not enough EIPs available for that resource
  fail: msg="FAILED - Not enough EIPs available"
  when:
  - "{{ ec2_eips | length < 2 }}"

- name: Random select EIP0
  shell: echo {{item }}
  with_items:
    - "{{ ec2_eips | random }}"
  register: asgJLB_eip0
  tags:
  - s3
  - ec2
  - eip

- name: Remove ec2Mgmt EIP0 from ec2_eips
  set_fact: ec2_eips="{{ ec2_eips | symmetric_difference(asgJLB_eip0.results[0].stdout_lines) }}"

- name: Random select EIP1
  shell: echo {{item }}
  with_items:
    - "{{ ec2_eips | random }}"
  register: asgJLB_eip1
  tags:
  - s3
  - ec2
  - eip
  when:
  - "{{ ec2_eips|length  >= 1 }}"

- name: Create the asgJLB config file
  template: src=asgJLB.conf.j2 dest=/var/tmp/asgJLB.conf

- name: Create the asgJLB config file
  template: src=asgJLB_target.conf.j2 dest=/var/tmp/asgJLB-target.conf

- name: Push files to the bucket
  s3: bucket="{{ stack_name }}" object="{{ item.split('/') | last }}" src="{{ item }}" mode=put s3_url="{{ api_protocol }}s3.{{ region_dns }}:{{ api_port }}"
  with_items:
  - "/var/tmp/asgJLB.conf"
  - "/var/tmp/asgJLB-target.conf"

- name: Remove ec2Mgmt EIP1 from ec2_eips
  set_fact: ec2_eips="{{ ec2_eips | symmetric_difference(asgJLB_eip1.results[0].stdout_lines) }}"
  when:
  - "{{ ec2_eips|length  >= 1 }}"
